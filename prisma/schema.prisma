// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  accessLevel String    @default("customer")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
  addresses   Address[]
}

model Product {
  id                      String      @id @default(uuid())
  productName             String
  price                   Float
  discountPercentage      Float
  stock                   Int
  rating                  Float
  brand                   String
  category                String
  subCategory             String
  imageUrl                Json
  variants                Json
  introduction            String      @db.Text
  technicalSpecifications Json
  orderItems              OrderItem[]
  Variant                 Variant[]
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
}

model Variant {
  id        String   @id @default(uuid())
  color     String
  imageUrl  Json
  productId String?  @unique
  product   Product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

model Address {
  id        String   @id @default(uuid())
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
}
